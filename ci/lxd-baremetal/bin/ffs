#!/bin/bash
REPOPATH="$( git rev-parse --show-toplevel )"
export ffs_build=$1
export ffs_arch=$2
export SOURCE_IMAGE="funtoo-fchroot"
export EMERGE_PACKAGES="fchroot pyyaml jinja"
export TEST_NAME="ffs-${USER}-${ffs_arch}-${ffs_build}"
export LXD_INTERFACE=${LXD_INTERFACE:-eth0}
export EMERGE_JOBS=${EMERGE_JOBS:-10}
if [ -n "$MAKEOPTS" ]; then
	export MAKEOPTS
fi
if ! lxc image info $SOURCE_IMAGE >/dev/null 2>&1; then
	echo "Source image $SOURCE_IMAGE does not exist. Exiting."
fi
CNAME=${TEST_NAME}-test
echo "Building Funtoo from Scratch arch $ffs_arch build $ffs_build in container $CNAME"
echo "This script will use the current branch and local uncommmitted changes in your working ffs repo."
# clean up previous instance if it exists...
if lxc info $CNAME >/dev/null 2>&1; then
	lxc stop --force $CNAME > /dev/null 2>&1
	lxc delete $CNAME > /dev/null 2>&1
fi

die() {
	echo $*
	exit 1
}

network_test() {
	foo="$(lxc exec $CNAME -- ifconfig ${LXD_INTERFACE} | grep 'inet 10.')"
	if [ -n "$foo" ]; then
		echo "yes"
	else
		echo "no"
	fi
}
export LXD_LAUNCH_EXTRA_ARGS="-p default -n lxdbr0"
cur_step=""
create="$SOURCE_IMAGE"
for step in fchroot tools cross_tools; do
	if [ -n "$(lxc image list -cl -f csv | grep $CNAME-$step)" ]; then
		echo -n "A snapshot image exists for step $step:"
		echo
		lxc image list $CNAME-$step
		echo
		echo -n  "Would you like to resume from this point (d=delete)? Y/n/d: > "
		read resume
		if [ "$resume" = "Y" ] || [ "$resume" = "y" ] || [ -z "$resume" ]; then
			create=$CNAME-$step
			cur_step=$step
			break
		elif [ "$resume" = "d" ]; then
		  lxc image delete $CNAME-$step
		fi
	fi
done
if [ "$ffs_build" == "gnu" ]; then
	last_step="stage1"
else
	last_step="fchroot"
fi
if [ -z "$cur_step" ]; then
	do_steps="cross_tools tools fchroot stage1"
elif [ "$cur_step" = "cross_tools" ]; then
	do_steps="tools fchroot stage1"
elif [ "$cur_step" = "tools" ]; then
	do_steps="fchroot stage1"
elif [ "$cur_step" = "fchroot" ]; then
	do_steps="stage1"
fi
if [ -z "$do_steps" ]; then
	echo "Error -- no steps to perform!"
	exit 1
fi
echo
echo "I will perform the following steps: $do_steps (last step $last_step)"
echo

echo Running lxc launch $create $CNAME $LXD_LAUNCH_EXTRA_ARGS...
lxc launch $create $CNAME $LXD_LAUNCH_EXTRA_ARGS || die "launch fail"
lxc exec $CNAME -- sh -c "cat > /etc/conf.d/netif.${LXD_INTERFACE}" << EOF
template="dhcpcd"
EOF
lxc exec $CNAME -- sh -c "[ ! -e /etc/init.d/netif.${LXD_INTERFACE} ] && cd /etc/init.d && ln -s netif.tmpl netif.${LXD_INTERFACE}"
lxc exec $CNAME rc-update add netif.${LXD_INTERFACE} default || die "${LXD_INTERFACE} fail 2"
lxc restart --force $CNAME || die "restart fail"
echo -n "Waiting for network."
while [ "$(network_test)" != "yes" ]; do
	echo -n "."
done
lxc exec $CNAME ego sync || die "sync fail"
if [ -n "$EGO_PROFILE_FLAVOR" ]; then
	lxc exec $CNAME epro flavor $EGO_PROFILE_FLAVOR || die "flavor fail"
fi
if [ -n "$EGO_PROFILE_MIX_INS" ]; then
	lxc exec $CNAME epro mix-in $EGO_PROFILE_MIX_INS || die "mix-in fail"
fi

if [ -n "$EMERGE_PACKAGES" ]; then
	lxc exec $CNAME -- emerge -u --jobs=$EMERGE_JOBS $EMERGE_PACKAGES || die "emerge packages fail"
fi

# pack up current git repo and any local changes, push into container:
install -m 0777 -d /var/tmp/ffs
export tmp_path=/var/tmp/ffs/$$
install -m 0755 -d $tmp_path
rm -rf $tmp_path/ffs-repo $tmp_path/ffs-repo.tar.gz $tmp_path/ffs.patch
# grab all local changes and all uncommitted (staged) files:
( cd $REPOPATH; git diff HEAD > $tmp_path/ffs.patch )

( cd $tmp_path; git clone $REPOPATH $tmp_path/ffs-repo )

# pass local calling parameters to inside of container:
cat > $tmp_path/ffs-repo/env.sh << EOF
export ffs_arch=$ffs_arch
export ffs_build=$ffs_build
EOF

if [ -e $tmp_path/ffs.patch ]; then
	( cd $tmp_path/ffs-repo; cat $tmp_path/ffs.patch | patch -p1 )
fi
tar czvf $tmp_path/ffs-repo.tar.gz -C $tmp_path ffs-repo || die
lxc file push $tmp_path/ffs-repo.tar.gz $CNAME/var/tmp/ || die "no pushy"
lxc exec $CNAME chmod -f 644 /var/tmp/ffs-repo.tar.gz
lxc exec $CNAME chmod -f 644 /var/tmp/ffs.patch
# unpack repo --
lxc exec $CNAME -- tar xvf /var/tmp/ffs-repo.tar.gz || die "unpack fail"
for step in $do_steps; do
	lxc exec $CNAME -- /root/ffs-repo/ci/lxd-baremetal/run.sh $step
	if [ $? -ne 0 ]; then
		echo "Test failure: step $step failed."
		exit 1
	else
		if [ "$step" != "$last_step" ]; then
			echo "Creating snapshot of $CNAME for step $step..."
			lxc snapshot --reuse $CNAME $step
			echo "Creating image from snapshot..."
			lxc publish $CNAME/$step --alias $CNAME-$step --compression pigz
		fi
	fi
	if [ "$step" == "$last_step" ]; then
		break
	fi
done
echo "Test PASS."
exit 0
