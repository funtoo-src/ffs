#!/bin/bash
REPOPATH="$( git rev-parse --show-toplevel )"
ffs_build=$1
ffs_arch=$2
echo "Building Funtoo from Scratch arch $ffs_arch build $ffs_build in container $container_name"
export SOURCE_IMAGE="funtoo-fchroot"
export EMERGE_PACKAGES="fchroot pyyaml jinja"
export TEST_NAME="ffs-${USER}-${ffs_arch}-${ffs_build}"
export LXD_INTERFACE=${LXD_INTERFACE:-eth0}
export EMERGE_JOBS=${EMERGE_JOBS:-10}
if [ -n "$MAKEOPTS" ]; then
	export MAKEOPTS
fi
if ! lxc image info $SOURCE_IMAGE >/dev/null 2>&1; then
	echo "Source image $SOURCE_IMAGE does not exist. Exiting."
fi
CNAME=${TEST_NAME}-test
# clean up previous instance if it exists...
if lxc info $CNAME >/dev/null 2>&1; then
	lxc stop --force $CNAME > /dev/null 2>&1
	lxc delete $CNAME > /dev/null 2>&1
fi

die() {
	echo $*
	exit 1
}

network_test() {
	foo="$(lxc exec $CNAME -- ifconfig ${LXD_INTERFACE} | grep 'inet 10.')"
	if [ -n "$foo" ]; then
		echo "yes"
	else
		echo "no"
	fi
}
export LXD_LAUNCH_EXTRA_ARGS="-p default -n lxdbr0"
echo Running lxc launch $SOURCE_IMAGE $CNAME $LXD_LAUNCH_EXTRA_ARGS...
lxc launch $SOURCE_IMAGE $CNAME $LXD_LAUNCH_EXTRA_ARGS || die "launch fail"
lxc exec $CNAME -- sh -c "cat > /etc/conf.d/netif.${LXD_INTERFACE}" << EOF
template="dhcpcd"
EOF
lxc exec $CNAME -- sh -c "[ ! -e /etc/init.d/netif.${LXD_INTERFACE} ] && cd /etc/init.d && ln -s netif.tmpl netif.${LXD_INTERFACE}"
lxc exec $CNAME rc-update add netif.${LXD_INTERFACE} default || die "${LXD_INTERFACE} fail 2"
lxc restart --force $CNAME || die "restart fail"
echo -n "Waiting for network."
while [ "$(network_test)" != "yes" ]; do
	echo -n "."
done
lxc exec $CNAME ego sync || die "sync fail"
if [ -n "$EGO_PROFILE_FLAVOR" ]; then
	lxc exec $CNAME epro flavor $EGO_PROFILE_FLAVOR || die "flavor fail"
fi
if [ -n "$EGO_PROFILE_MIX_INS" ]; then
	lxc exec $CNAME epro mix-in $EGO_PROFILE_MIX_INS || die "mix-in fail"
fi

if [ -n "$EMERGE_PACKAGES" ]; then
	lxc exec $CNAME -- emerge -u --jobs=$EMERGE_JOBS $EMERGE_PACKAGES || die "emerge packages fail"
fi

# pack up current git repo and any local changes, push into container:

cat > $REPOPATH/env.sh << EOF
export ffs_arch=$ffs_arch
export ffs_build=$ffs_build
EOF

rm -rf /var/tmp/ffs-repo /var/tmp/ffs-repo.tar.gz /var/tmp/ffs.patch
( cd $REPOPATH; git diff > /var/tmp/ffs.patch )
( cd /var/tmp; git clone $REPOPATH /var/tmp/ffs-repo )
if [ -e /var/tmp/ffs.patch ]; then
	( cd /var/tmp/ffs-repo; cat /var/tmp/ffs.patch | patch -p1 )
fi
tar czvf /var/tmp/ffs-repo.tar.gz ffs-repo -C /var/tmp || die
lxc file push /var/tmp/ffs-repo.tar.gz $CNAME/var/tmp/ || die "no pushy"

# unpack repo --
lxc exec $CNAME -- tar xvf /var/tmp/ffs-repo.tar.gz || die "unpack fail"
lxc exec $CNAME -- /var/tmp/ffs-repo/ci/lxd-baremetal/run.sh
if [ $? -ne 0 ]; then
	echo "Test failure."
	exit 1
else
	echo "Test PASS."
	exit 0
fi
