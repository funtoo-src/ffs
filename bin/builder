#!/usr/bin/python3
import os
import sys
import jinja2
from jinja2 import BaseLoader
from yaml import safe_load


class Sourcer:
	"""
	This class is responsible for parsing sources.yaml and performing various actions, such as downloading all source code
	or accessing metadata for a particular set of sources.
	"""

	sources = {}

	def __init__(self, infile):
		with open(infile, "r") as myf:
			for top_name, src_cats in safe_load(myf.read()).items():
				for cat_name, cat_contents in src_cats.items():
					if "defaults" in cat_contents:
						defaults = cat_contents["defaults"].copy()
					else:
						defaults = {}
					for pkg_block in cat_contents["packages"]:
						if len(pkg_block.keys()) != 1:
							raise ValueError(f"Unexpected YAML: {pkg_block}")
						name = list(pkg_block.keys())[0]
						innards = list(pkg_block.values())[0]
						if isinstance(innards, str):
							# pkgname: '1.2.3' short format:
							local_pkginfo = {"version": innards}
						elif isinstance(innards, float):
							local_pkginfo = {"version": str(innards)}
						else:
							local_pkginfo = innards
						pkginfo = defaults.copy()
						pkginfo.update(local_pkginfo)
						pkginfo["name"] = name
						pkginfo["sources"] = []
						if "url" in pkginfo and isinstance(pkginfo["url"], str):
							sources = [pkginfo["url"]]
							del pkginfo["url"]
						elif "urls" in pkginfo and isinstance("urls", list):
							sources = pkginfo["urls"]
							del pkginfo["urls"]
						else:
							raise ValueError(f"Expecting string ('url') or list of strings ('urls'): {pkginfo['url']}")
						sources_kwargs = {}
						for kwarg in [ "ext"]:
							if kwarg in pkginfo:
								sources_kwargs[kwarg] = pkginfo[kwarg]
						for url in sources:
							pkginfo["sources"].append(url.format(version=pkginfo["version"], name=name, **sources_kwargs))
						if "srcdir" in pkginfo:
							pkginfo["srcdir"] = pkginfo["srcdir"].format(version=pkginfo["version"])
						self.sources[name] = pkginfo

	def unpack(self, sources):
		os.makedirs(os.path.join(os.environ["CLFS"], "build"), exist_ok=True)
		first_source = None
		out = ""
		for source in sources.split(','):
			if first_source is None:
				first_source = self.sources[source]
			for url in self.sources[source]["sources"]:
				tarball = url.split("/")[-1]
				out += f"cd ${{CLFS}}/build && tar xf ${{CLFS}}/sources/{tarball}\n"
				out += f"export {source.replace('-','_').upper()}_VERSION=\"{self.sources[source]['version']}\"\n"
		if "srcdir" in first_source:
			srcdir = first_source["srcdir"]
		else:
			srcdir = f"{first_source['name']}-{first_source['version']}"
		out += f"cd ${{CLFS}}/build/{srcdir}\n"
		if "patches" in first_source:
			for patch in first_source["patches"]:
				out += f"cat ${{CLFS}}/patches/{patch} | patch -p1\n"
		return out


class Builder:

	def get_jinja_template(self, template_file):
		with open(template_file, "r") as tempf:
			template = jinja2.Template(tempf.read())
			return template

	def parse_yaml_rule(self, package_section):
		if not isinstance(package_section, dict):
			raise TypeError("Found package section that is not in proper format.")
		# Remove extra singleton outer dictionary (see format above)
		name = list(package_section.keys())[0]
		body = list(package_section.values())[0]
		if not isinstance(body, str):
			raise ValueError(f"Expecting str: {body}")
		body_tmpl = jinja2.Environment(loader=jinja2.BaseLoader()).from_string(body)
		# expand any arch jinja
		body = body_tmpl.render(**self.arch)
		out = {
			"sources": name,
			"unpack": self.sourcer.unpack(name),
			"build_steps": body
		}
		out.update(self.arch)
		return out

	def __init__(self, inpath):
		self.loader = jinja2.FileSystemLoader(os.path.join(inpath, "templates"))
		self.jinja = jinja2.Environment(loader=self.loader)
		infile = os.path.join(inpath, "steps.yaml")
		self.sourcer = Sourcer(os.path.join(os.environ["CLFS"], "sources.yaml"))
		with open(os.path.join(os.environ["CLFS"], "arches", f"{sys.argv[1]}.yaml")) as myarch:
			self.arch = safe_load(myarch.read())["arch"]
		with open(infile, "r") as myf:
			for rule_name, rule in safe_load(myf.read()).items():
				if rule_name != sys.argv[2]:
					continue
				if "defaults" in rule:
					defaults = rule["defaults"].copy()
				else:
					defaults = {}

				tmpl = self.jinja.get_template(defaults["template"])
				pkginfo_list = []
				for package in rule["steps"]:
					rule = self.parse_yaml_rule(package)
					cmds = tmpl.render(rule)
					print(cmds)
					result = os.system(cmds)
					if result != 0:
						sys.exit(1)


if __name__ == "__main__":
	if "CLFS" not in os.environ:
		raise EnvironmentError("Please set CLFS environment variable.")
	mybuilder = Builder(os.path.join(os.environ["CLFS"]))


# vim: ts=4 sw=4 noet
