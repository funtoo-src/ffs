cross_tools:
  defaults:
    template: base.tmpl
  steps:
    - none: |
        if [ -e "${CLFS}/tools" ] || [ -e "${CLFS}/cross-tools" ]; then
          echo "Please remove ${CLFS}/tools and ${CLFS}/cross-tools before running."
          exit 1
        fi
        # initial setup:
        install -d "${CLFS}/cross-tools"
        install -d "${CLFS}/tools"
        install -d "${CLFS}/tools/lib"
        ln -sf lib "${CLFS}/tools/lib64"
        # make sure it's a symlink
        test -L "${CLFS}/tools/lib64"
        # Create critical directories:
        install -d ${CLFS}/{dev,proc,run,sys,etc,lib,var}
        install -m 1777 -d ${CLFS}/tmp ${CLFS}/var/tmp
    - linux: |
        make mrproper
        make ARCH={{arch}} INSTALL_HDR_PATH=${CLFS}/tools headers_install
    - binutils: |
        mkdir binutils-build && cd binutils-build
        AR=ar AS=as ../configure \
          --prefix=${CLFS}/cross-tools \
          --host=${CLFS_HOST} \
          --target=${CLFS_TARGET} \
          --with-sysroot=${CLFS} \
          --with-lib-path=${CLFS}/tools/lib \
          --disable-nls \
          --disable-static \
          --enable-64-bit-bfd \
          --disable-multilib \
          --disable-werror
        make
        make install
    - gmp: |
        ./configure \
          --prefix=${CLFS}/cross-tools \
          --enable-cxx \
          --disable-static
        make
        make install
        make check
    - mpfr: |
        LDFLAGS="-Wl,-rpath,${CLFS}/cross-tools/lib" ./configure \
          --prefix=${CLFS}/cross-tools \
          --disable-static \
          --with-gmp=${CLFS}/cross-tools
        make
        make install
    - mpc: |
        LDFLAGS="-Wl,-rpath,${CLFS}/cross-tools/lib" ./configure \
          --prefix=${CLFS}/cross-tools \
          --disable-static \
          --with-mpfr=${CLFS}/cross-tools
        make
        make install
    - gcc: |
        mkdir gcc-build && cd gcc-build
        AR=ar LDFLAGS="-Wl,-rpath,${CLFS}/cross-tools/lib" \
          ../configure \
          {%- if arch == "powerpc" %}
          --with-abi=elfv2 \
          --enable-secureplt \
          --enable-decimal-float=no \
          {%- endif %}
          --prefix=${CLFS}/cross-tools \
          --build=${CLFS_HOST} \
          --host=${CLFS_HOST} \
          --target=${CLFS_TARGET} \
          --with-sysroot=${CLFS} \
          --with-local-prefix=${CLFS}/tools \
          --with-native-system-header-dir=/tools/include \
          --disable-shared \
          --without-headers \
          --with-newlib \
          --disable-decimal-float \
          --disable-libgomp \
          --disable-libssp \
          --disable-libatomic \
          --disable-libitm \
          --disable-libsanitizer \
          --disable-libquadmath \
          --disable-libvtv \
          --disable-libcilkrts \
          --disable-libstdc++-v3 \
          --disable-threads \
          --disable-multilib \
          --enable-languages=c \
          --with-mpfr=${CLFS}/cross-tools \
          --with-gmp=${CLFS}/cross-tools \
          --with-mpc=${CLFS}/cross-tools
        make all-gcc all-target-libgcc
        make install-gcc install-target-libgcc
    - musl: |
        CC="${CLFS_TARGET}-gcc ${CLFS_CFLAGS}" \
          ./configure \
          CROSS_COMPILE=${CLFS_TARGET}- \
          --prefix=/ \
          --target=${CLFS_TARGET}
        make

        # riscv-64bit expects to find crt*.o, as well as -lgcc_s, -lc in
        # /tools/riscv64-unknown-linux-musl/lib/. The most straightforward
        # way to address this is to make /tools/riscv64-unknown-linux-musl/lib
        # a symlink to /tools/lib. On riscv64, we find all these goodies
        # installed to that path.

        install -d ${CLFS}/tools/${CLFS_TARGET}
        ln -sf ../lib ${CLFS}/tools/${CLFS_TARGET}/lib

        DESTDIR=${CLFS}/tools make install
        cd "${CLFS}"/tools/lib
        rm -f ld-musl-{{musl_lib_arch}}.so.1
        ln -sf libc.so ld-musl-{{musl_lib_arch}}.so.1
        ls -la ld-musl-{{musl_lib_arch}}.so.1
        find -type f \
          -iname 'crt*.o' \
          -exec ln -sf ../../../tools/lib/{} "${CLFS}"/cross-tools/"${CLFS_TARGET}"/lib/{} \;
    - gcc: |
        mkdir gcc-build && cd gcc-build
        AR=ar LDFLAGS="-Wl,-rpath,${CLFS}/cross-tools/lib" \
          ../configure \
          {%- if arch == "powerpc" %}
          --with-abi=elfv2 \
          --enable-secureplt \
          --enable-decimal-float=no \
          {%- endif %}
          --prefix=${CLFS}/cross-tools \
          --build=${CLFS_HOST} \
          --target=${CLFS_TARGET} \
          --host=${CLFS_HOST} \
          --with-sysroot=${CLFS} \
          --with-local-prefix=${CLFS}/tools \
          --with-native-system-header-dir=/tools/include \
          --with-lib-path=${CLFS}/tools/lib \
          --disable-nls \
          --disable-static \
          --enable-languages=c,c++ \
          --disable-multilib \
          --disable-libsanitizer \
          --with-mpfr=${CLFS}/cross-tools \
          --with-gmp=${CLFS}/cross-tools \
          --with-mpc=${CLFS}/cross-tools
        make AS_FOR_TARGET="${CLFS_TARGET}-as" \
          LD_FOR_TARGET="${CLFS_TARGET}-ld"
        make install
    - file: |
        ./configure \
        --prefix=${CLFS}/cross-tools
        make
        make install
tools:
  defaults:
    template: tools.tmpl
  steps:
    - none: |
        # A local 'patchelf' command is currently required for the final cross_tools to run
        which patchelf
    - gmp: |
        CC_FOR_BUILD=gcc \
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET} \
        --enable-cxx
        make
        make install
    - mpfr: |
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET}
        make
        make install
    - mpc: |
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET}
        make
        make install
    - isl: |
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET}
        make
        make install
    - zlib: |
        unset CC CXX AR AS RANLIB LD STRIP
        CHOST=${CLFS_TARGET} \
        ./configure \
        --prefix=${CLFS}/tools
        make
        make install
    - binutils: |
        mkdir binutils-build && cd binutils-build
        ../configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET} \
        --target=${CLFS_TARGET} \
        --with-lib-path=${CLFS}/tools/lib \
        --disable-nls \
        --enable-shared \
        --enable-64-bit-bfd \
        --disable-multilib \
        --enable-gold=yes \
        --enable-plugins \
        --with-system-zlib \
        --enable-threads
        make
        make install
    - gcc: |
        sed -i 's|^RAW_CXX_FOR_TARGET="$CXX_FOR_TARGET|& -nostdinc++|' configure
        mkdir gcc-build && cd gcc-build
        ../configure \
        {%- if arch == "powerpc" %}
        --with-abi=elfv2 \
        --enable-secureplt \
        --enable-decimal-float=no \
        {%- endif %}
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET} \
        --target=${CLFS_TARGET} \
        --with-local-prefix=${CLFS}/tools \
        --disable-multilib \
        --enable-languages=c,c++ \
        --with-system-zlib \
        --with-native-system-header-dir=/tools/include \
        --disable-libssp \
        --enable-install-libiberty \
        --disable-libstdcxx-pch \
        --disable-libsanitizer
        make AS_FOR_TARGET="${AS}" \
        LD_FOR_TARGET="${LD}"
        make install
    - ncurses: |
        sed -i -e "s/INSTALL_OPT_S=\\\"-s/& --strip-program=${STRIP}/" configure
        mkdir ncurses-build && cd ncurses-build
        ../configure \
        --prefix=${CLFS}/tools \
        --with-shared \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET} \
        --without-debug \
        --without-ada \
        --enable-overwrite \
        --with-build-cc=gcc \
        --enable-overwrite \
        --with-default-terminfo-dir=${CLFS}/tools/share/terminfo \
        --with-termlib
        make
        make install
        cd .. && mkdir ncursesw-build && cd ncursesw-build
        ../configure \
        --prefix=${CLFS}/tools \
        --with-shared \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET} \
        --without-debug \
        --without-ada \
        --enable-overwrite \
        --with-build-cc=gcc \
        --enable-widec \
        --includedir=${CLFS}/tools/include/ncursesw \
        --with-default-terminfo-dir=${CLFS}/tools/share/terminfo \
        --with-termlib
        make
        make install
    - bash: |
        cat > config.cache << "BASH_EOF"
        ac_cv_func_mmap_fixed_mapped=yes
        ac_cv_func_strcoll_works=yes
        ac_cv_func_working_mktime=yes
        bash_cv_func_sigsetjmp=present
        bash_cv_getcwd_malloc=yes
        bash_cv_job_control_missing=present
        bash_cv_printf_a_format=yes
        bash_cv_sys_named_pipes=present
        bash_cv_ulimit_maxfds=yes
        bash_cv_under_sys_siglist=yes
        bash_cv_unusable_rtsigs=no
        gt_cv_int_divbyzero_sigfpe=yes
        BASH_EOF
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET} \
        --without-bash-malloc \
        --cache-file=config.cache
        make
        make install
        test -x ${CLFS}/tools/bin/bash
        # set up initial shells in correct location for "#!/bin/sh" and "#!/bin/bash" scripts:
        rm -f ${CLFS}/bin/bash ${CLFS}/bin/sh || true
        ln -sf ../tools/bin/bash ${CLFS}/bin/bash
        ln -sf ../tools/bin/bash ${CLFS}/bin/sh
    - bzip2: |
        sed -i \
          -e '/^all/s/ test$//' \
          -e 's|CFLAGS=|&-fPIC |' \
        Makefile
        make CC="${CC}" AR="${AR}" RANLIB="${RANLIB}"
        make PREFIX=${CLFS}/tools install
    - check: |
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET} \
        --disable-subunit
        make
        make install
    - coreutils: |
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET} \
        --enable-install-program=hostname \
        --cache-file=config.cache
        sed -i -e 's/^man1_MANS/#man1_MANS/' Makefile
        make
        make install
    - diffutils: |
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET}
        make
        make install
    - file: |
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET} \
        --with-pic=yes
        make
        make install
    - findutils: |
        echo "gl_cv_func_wcwidth_works=yes" > config.cache
        echo "ac_cv_func_fnmatch_gnu=yes" >> config.cache
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET} \
        --cache-file=config.cache
        make
        make install
    - gawk: |
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET}
        make
        make install
    - gettext: |
        EMACS="no" \
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET} \
        --disable-shared
        make
        make install
    - grep: |
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET}
        make
        make install
    - gzip: |
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET}
        make
        make install
    - make: |
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET} \
        --without-guile
        make
        make install
    - patch: |
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET}
        make
        make install
    - sed: |
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET}
        make
        make install
    - tar: |
        cat > config.cache << BASH_EOF
        gl_cv_func_wcwidth_works=yes
        gl_cv_func_btowc_eof=yes
        ac_cv_func_malloc_0_nonnull=yes
        gl_cv_func_mbrtowc_incomplete_state=yes
        gl_cv_func_mbrtowc_nul_retval=yes
        gl_cv_func_mbrtowc_null_arg1=yes
        gl_cv_func_mbrtowc_null_arg2=yes
        gl_cv_func_mbrtowc_retval=yes
        gl_cv_func_wcrtomb_retval=yes
        BASH_EOF
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET} \
        --cache-file=config.cache
        make
        make install
    - util-linux: |
        NCURSESW6_CONFIG=" " \
        NCURSES6_CONFIG=" " \
        NCURSESW5_CONFIG=" " \
        NCURSES5_CONFIG=" " \
        LDFLAGS="-ltinfow" \
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET} \
        --disable-bash-completion \
        --disable-makeinstall-chown \
        --disable-makeinstall-setuid \
        --disable-nologin \
        --without-python
        make
        make install
    - nano: |
        LDFLAGS="-ltinfow" \
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET}
        make
        make install
    - xz-utils: |
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET}
        make
        make install
    - which: |
        ./configure \
        --prefix=${CLFS}/tools \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET}
        make
        make install
    - none: |
        find "${CLFS}"/tools -type f -exec file {} + | \
          grep ELF | \
          cut -d':' -f1 | \
          xargs -I{} patchelf \
          --set-interpreter "${DYNAMIC_LINKER#$CLFS}" \
          --set-rpath /tools/lib/ {} 2>/dev/null || true
        find ${CLFS}/tools -iname '*.pc' -exec sed -i -e "s|${CLFS}||g" {} \; || true
        if [ ! -L "$CLFS/lib/ld-musl-{{musl_lib_arch}}.so.1" ]; then
          ln -sf ../tools/lib/ld-musl-{{musl_lib_arch}}.so.1 "$CLFS/lib/ld-musl-{{musl_lib_arch}}.so.1"
        fi

        cat > ${CLFS}/etc/profile << "PROFILE_EOF"
        # Funtoo from Scratch /etc/profile for login shells in the temporary environment.
        #
        # The following settings allow terminal-aware programs to find the terminal definitions
        # and also allow temporary tools to be found, while also allowing 'official' tools installed
        # in FHS-compliant paths to gradually replace these tools.

        export TERMINFO=/tools/share/terminfo
        export PATH=/bin:/usr/bin:/sbin:/usr/sbin:/tools/sbin:/tools/bin
        export HOME=/

        umask 022

        PROFILE_EOF

fchroot:
  defaults:
    template: fchroot.tmpl
  steps:
    - none: |

        # We will use this part of the process to create the necessary base environment for the
        # native build environment. This will allow these things to be wiped away, and in theory
        # we can re-start the fchroot build to recreate these.

        # The following configuration file tells musl to look for libraries in the following paths,
        # which includes /tools/lib. This is the musl equivalent to /etc/ld.so.conf and ldconfig.
        # Once we have built native versions of all our libraries, this file can be updated to
        # remove the reference to /tools/lib if desired -- this is optional, as any libraries in
        # the standard locations will be preferred over /tools/lib.

        echo /lib:/usr/local/lib:/usr/lib:/tools/lib > /etc/ld-musl-{{musl_lib_arch}}.path

    - rsync: |

        # linux headers use rsync to install. We will compile a minimal native
        # rsync so it is happy.

        ./configure \
        --prefix=/usr \
        --disable-openssl \
        --disable-xxhash \
        --disable-zstd \
        --disable-lz4
        make
        make install
    - linux: |
        make mrproper
        make INSTALL_HDR_PATH=/usr headers_install
    - musl: |
        # Install our final musl libc.

        # This build of musl is actually a big deal. Up to this point, we have been relying on a libc
        # within /tools/lib, and we have performed the following special tricks to get this to work:
        #
        # 1. We have used patchelf to modify all binaries in /tools to explicitly look for the 
        #    dynamic loader in /tools/lib.
        #
        # 2. We have placed a /lib/ld-musl-{{musl_lib_arch}}.so symlink in /lib to allow binaries
        #    built within the chroot to find a dynamic loader at the proper location. It points to
        #    the dynamic loader in /tools/lib, and is just a placeholder until we have our final
        #    libc.
        #
        # After ``make install`` completes:
        #
        # /lib/ld-musl-{{musl_lib_arch}}.so.1 will now point to /lib/libc.so, which is our new libc.

        ./configure --prefix=/ --includedir=/usr/include --exec-prefix=/bin
        make
        make install
    - zlib: |
        ./configure \
        --prefix=/usr
        make
        make check
        make install
        rm -fv /usr/lib/libz.a
    - m4: |

        # gmp requires a functioning m4. We can build this natively or make it part of /tools. Let's
        # try building it natively.

        ./configure --prefix=/usr
        make
        make install
    - gmp: |
        ./configure --prefix=/usr \
        --enable-cxx
        make
        make install
    - mpfr: |
        ./configure --prefix=/usr
        make
        make install
    - mpc: |
        ./configure --prefix=/usr
        make
        make install
    - coreutils: |
        FORCE_UNSAFE_CONFIGURE=1 \
        ./configure \
        --prefix=/usr \
        --enable-no-install-program=kill,uptime
        sed -i -e 's/^man1_MANS/#man1_MANS/' Makefile
        make
        make install
    - perl: |

        # Perl requires coreutils to be installed at a standard location first, as perl's Cwd module uses
        # /usr/bin/pwd so it expects it to exist in the build environment. Without /usr/bin/pwd existing,
        # building of perl modules will fail with:
        #
        # Can't figure out your cwd! at /build/perl-5.34.1/cpan/ExtUtils-MakeMaker/lib/ExtUtils/MakeMaker.pm line 238.
        #

        sh Configure -des \
          -Dcc=gcc \
          -Dprefix=/usr \
          -Dvendorprefix=/usr \
          -Dprivlib=/usr/lib/perl5/5.34/core_perl \
          -Darchlib=/usr/lib/perl5/5.34/core_perl \
          -Dsitelib=/usr/lib/perl5/5.34/site_perl \
          -Dsitearch=/usr/lib/perl5/5.34/site_perl \
          -Dvendorlib=/usr/lib/perl5/5.34/vendor_perl \
          -Dvendorarch=/usr/lib/perl5/5.34/vendor_perl
        make
        make install
    - texinfo: |

        # Texinfo requires perl to build. This is the first perl dependency we see in the build so far.

        ./configure --prefix=/usr
        make
        make install
    - binutils: |
        mkdir binutils-build && cd binutils-build
        ../configure \
          --prefix=/usr \
          --enable-gold \
          --enable-ld=default \
          --enable-plugins \
          --enable-shared \
          --disable-werror \
          --enable-64-bit-bfd \
          --with-system-zlib
        make tooldir=/usr
        #make -k check
        make tooldir=/usr install
        rm -fv /usr/lib/lib{bfd,ctf,ctf-nobfd,opcodes}.a
    - gcc: |
        case $(uname -m) in
        x86_64)
          sed -e '/m64=/s/lib64/lib/' \
          -i.orig gcc/config/i386/t-linux64
          ;;
        esac
        mkdir gcc-build && cd gcc-build
        ../configure \
          LD=ld \
          {%- if arch == "powerpc" %}
          --with-abi=elfv2 \
          --enable-secureplt \
          --enable-version-specific-runtime-libs \
          --enable-decimal-float=no \
          {%- endif %}
          --build=${CLFS_TARGET} \
          --host=${CLFS_TARGET} \
          --target=${CLFS_TARGET} \
          --prefix=/usr \
          --disable-libssp \
          --disable-libmpx \
          --disable-libmudflap \
          --disable-libsanitizer \
          --disable-symvers \
          --enable-__cxa_atexit \
          --enable-default-pie \
          --enable-default-sse \
          --enable-cloog-backend \
          --enable-languages=c,c++ \
          --disable-multilib \
          --disable-bootstrap \
          --with-system-zlib
        make
        make install
    - gzip: |
        ./configure --prefix=/usr
        make
        make install
 
