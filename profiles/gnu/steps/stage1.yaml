fchroot:
  defaults:
    template: stage1.tmpl
  steps:
    - ego: |
        install -d /usr/share/ego
        cp -r modules* python /usr/share/ego/
        rm /usr/share/ego/modules*/upgrade*
        rm -rf /usr/share/ego/python/test
        chmod +x /usr/share/ego/modules/*.ego
        cp ego /usr/bin/
        ln -sf ego /usr/bin/epro
        ln -sf ego /usr/bin/edoc
        cat > /etc/ego.conf << "EGO_EOF"
        [global]
        release = next
        EGO_EOF
        install -d /var/db/pkg/app-admin/ego-${EGO_VERSION}
        ego sync
    - none: |
        cat > /etc/profile << 'PROFILE_EOF'
        # This is necessary to ensure that "env-updates" run by portage don't wipe out any LDPATH setting.
        # This causes linking problems for elfutils and rhash if it happens:
        # /etc/profile: login shell setup
        #
        # That this file is used by any Bourne-shell derivative to setup the
        # environment for login shells.
        #

        # Load environment settings from profile.env, which is created by
        # env-update from the files in /etc/env.d
        if [ -e /etc/profile.env ] ; then
            . /etc/profile.env
        fi

        # You should override these in your ~/.bashrc (or equivalent) for per-user
        # settings. For system defaults, you can add a new file in /etc/profile.d/.

        export PATH=${PATH:-/usr/sbin:/usr/bin:/sbin:/bin}
        export EDITOR=${EDITOR:-/bin/nano}
        export PAGER=${PAGER:-/usr/bin/less}

        # 077 would be more secure, but 022 is generally quite realistic
        umask 022

        unset ROOTPATH

        # process *.sh files in /etc/profile.d
        for sh in /etc/profile.d/*.sh ; do
            [ -r "$sh" ] && . "$sh"
        done
        unset sh
        if [ -n "${BASH_VERSION-}" ] ; then
            # Newer bash ebuilds include /etc/bash/bashrc which will setup PS1
            # including color.  We leave out color here because not all
            # terminals support it.
            if [ -f /etc/bash/bashrc ] ; then
                # Bash login shells run only /etc/profile
                # Bash non-login shells run only /etc/bash/bashrc
                # Since we want to run /etc/bash/bashrc regardless, we source it 
                # from here.  It is unfortunate that there is no way to do 
                # this *after* the user's .bash_profile runs (without putting 
                # it in the user's dot-files), but it shouldn't make any 
                # difference.
                . /etc/bash/bashrc
            else
                PS1='\u@\h \w \$ '
            fi
        else
            # Setup a bland default prompt.  Since this prompt should be useable
            # on color and non-color terminals, as well as shells that don't
            # understand sequences such as \h, don't put anything special in it.
            PS1="${USER:-$(whoami 2>/dev/null)}@$(uname -n 2>/dev/null) \$ "
        fi
        PROFILE_EOF

        install -d /etc/env.d

        cat > /etc/env.d/50baselayout << 'LD_EOF'
        # /etc/env.d/50baselayout
        PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/bin"
        ROOTPATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/bin"
        MANPATH="/usr/local/share/man:/usr/share/man"
        INFOPATH="/usr/share/info"
        CONFIG_PROTECT_MASK="/etc/gentoo-release"
        LDPATH='/lib:/usr/lib:/usr/local/lib'
        LD_EOF

        cat > /etc/env.d/00basic << 'BASIC_EOF'
        LANG="en_US.UTF-8"
        LC_COLLATE="POSIX"
        BASIC_EOF

        source /etc/profile
        /usr/sbin/env-update
        test -e /etc/ld.so.conf
        test -e /etc/ld.so.cache

        export PYTHON_ABIS="$(portageq envvar PYTHON_ABIS)"
        export FEATURES="-pid-sandbox nodoc noman noinfo"
        export ROOT=/tmp/stage1root
        rm -rf $ROOT
        # work around an issue where split-usr is being unset.
        export USE="split-usr"
        install -m 0755 -d $ROOT/usr/bin
        install -m 0755 -d $ROOT/bin
        # also fix a lib issue -- did I miss some steps from metro?
        install -m 0755 -d $ROOT/lib64
        ln -sf lib64 $ROOT/lib
        install -d ${ROOT}/{proc,sys,dev}
        # create symlink to real meta-repo to allow ego to pick up profiles inside ROOT...
        install -m 0755 -o 250 -g 250 -d $ROOT/var/git
        install -d ${ROOT}/etc
        ln -sf /var/git/meta-repo $ROOT/var/git/
        ln -sf /etc/portage ${ROOT}/etc/
        ego profile mix-in +stage1
        # fix a circular dep
        install -d /var/db/pkg/sys-apps/openrc-9999
        # fix a required USE flag
        install -d /etc/portage/package.use
        echo "dev-libs/libxml2 python" > /etc/portage/package.use/libxml2
        # It's important to merge baselayout first so it can set perms on key dirs
        emerge --nodeps baselayout

        cat > /var/tmp/build.sh << 'BUILD_EOF'
        #!/bin/bash

        # We put this in a separate file so we can have different error handling. Main script aborts on any
        # failed command.

        TO_BUILD="
          app-arch/bzip2
          app-arch/gzip
          app-arch/tar
          app-arch/xz-utils
          app-shells/bash
          net-misc/rsync
          net-misc/wget
          sys-devel/autoconf
          sys-devel/automake
          sys-devel/libtool
          sys-apps/coreutils
          sys-apps/diffutils
          sys-apps/file
          sys-apps/findutils
          sys-apps/gawk
          sys-apps/grep
          sys-apps/less
          sys-apps/net-tools
          sys-apps/sed
          sys-apps/texinfo
          sys-devel/binutils
          sys-devel/bison
          sys-devel/flex
          sys-devel/gcc
          sys-devel/gettext
          sys-devel/gnuconfig
          sys-devel/make
          sys-devel/patch
          sys-libs/pam
          virtual/editor
          virtual/libc
          virtual/os-headers
          virtual/package-manager
          sys-apps/openrc"

        attempts=0
        max_attempts=5
        while [ $attempts -lt $max_attempts ]; do
            # Needed for glibc:
            export BOOTSTRAP_RAP=yes

            emerge -u --noreplace --oneshot --onlydeps --jobs=3 --rebuild-exclude "sys-apps/openrc sys-libs/glibc net-misc/curl sys-devel/gcc" $TO_BUILD
            if [ $? -ne 0 ]; then
                attempts=$(( $attempts + 1 ))
            else
                break
            fi
        done
        if [ $attempts -eq $max_attempts ]; then
            echo "Initial deps merge failed."
            exit 1
        fi
        fails=0
        success=0
        catpkg_fails=0
        catpkg_fails_list=""
        while true; do
          for pkg in $TO_BUILD; do

            # Needed for glibc:
            export BOOTSTRAP_RAP=yes

            attempt=1
            while [ $attempt -lt 4 ]; do
                success=no
                emerge -u --noreplace --oneshot --jobs=3 --rebuild-exclude "sys-apps/openrc sys-libs/glibc net-misc/curl sys-devel/gcc" $pkg
                if [ $? -ne 0 ]; then
                    fails=$(( $fails + 1 ))
                    attempt=$(( $attempt + 1 ))
                else
                    success=yes
                    break
                fi
            done
            if [ "$success" == "no" ]; then
                catpkg_fails=$(( $catpkg_fails + 1 ))
                catpkg_fails="$catpkg_fails $pkg"
            fi
        done
        if [ "$catpkg_fails" -eq 0 ]; then
            echo "Build script completed successfully"
        else
            echo "Build script FAILURE."
            echo "$catpkg_fails packages failed to merge: $catpkg_fails_list"
        fi
        exit $catpkg_fails
        BUILD_EOF
        chmod +x /var/tmp/build.sh
        /var/tmp/build.sh
        gcc-config 1
        ego profile mix-in -stage1
