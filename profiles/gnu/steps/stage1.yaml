fchroot:
  defaults:
    template: stage1.tmpl
  steps:
    - ego: |
        install -d /usr/share/ego
        cp -r modules* python /usr/share/ego/
        rm /usr/share/ego/modules*/upgrade*
        rm -rf /usr/share/ego/python/test
        chmod +x /usr/share/ego/modules/*.ego
        cp ego /usr/bin/
        ln -sf ego /usr/bin/epro
        ln -sf ego /usr/bin/edoc
        cat > /etc/ego.conf << "EGO_EOF"
        [global]
        release = next
        EGO_EOF
        install -d /var/db/pkg/app-admin/ego-${EGO_VERSION}
        ego sync
    - none: |
        # Do this before setting ROOT:
        /usr/sbin/env-update
        /sbin/ldconfig
        source /etc/profile
        export CONFIG_PROTECT="-*"
        export PYTHON_ABIS="$(portageq envvar PYTHON_ABIS)"
        export FEATURES="-pid-sandbox nodoc noman noinfo"
        export ROOT=/tmp/stage1root
        rm -rf $ROOT
        # work around an issue where split-usr is being unset.
        export USE="split-usr"
        install -m 0755 -d $ROOT/usr/bin
        install -m 0755 -d $ROOT/bin
        # also fix a lib issue -- did I miss some steps from metro?
        install -m 0755 -d $ROOT/lib64
        ln -sf lib64 $ROOT/lib
        install -m 0755 -d $ROOT/usr/lib
        ln -sf lib $ROOT/usr/lib64
        install -d ${ROOT}/{proc,sys,dev}
        # create symlink to real meta-repo to allow ego to pick up profiles inside ROOT...
        install -m 0755 -o 250 -g 250 -d $ROOT/var/git
        install -d ${ROOT}/etc
        ln -sf /var/git/meta-repo $ROOT/var/git/
        ln -sf /etc/portage ${ROOT}/etc/
        ego profile mix-in +stage1
        # fix a circular dep
        install -d /var/db/pkg/sys-apps/openrc-9999
        # fix a required USE flag
        install -d /etc/portage/package.use
        echo "dev-libs/libxml2 python" > /etc/portage/package.use/libxml2
        # It's important to merge baselayout first so it can set perms on key dirs
        emerge --nodeps baselayout

        cat > /var/tmp/build.sh << 'BUILD_EOF'
        #!/bin/bash

        # We put this in a separate file so we can have different error handling. Main script aborts on any
        # failed command.

        TO_BUILD="
          app-arch/bzip2
          app-arch/gzip
          app-arch/tar
          app-arch/xz-utils
          app-shells/bash
          net-misc/rsync
          net-misc/wget
          sys-devel/autoconf
          sys-devel/automake
          sys-devel/libtool
          sys-apps/coreutils
          sys-apps/diffutils
          sys-apps/file
          sys-apps/findutils
          sys-apps/gawk
          sys-apps/grep
          sys-apps/less
          sys-apps/net-tools
          sys-apps/sed
          sys-apps/texinfo
          sys-devel/binutils
          sys-devel/bison
          sys-devel/flex
          sys-devel/gcc
          sys-devel/gettext
          sys-devel/gnuconfig
          sys-devel/make
          sys-devel/patch
          sys-libs/pam
          virtual/editor
          virtual/libc
          virtual/os-headers
          virtual/package-manager
          sys-apps/openrc"

        attempts=0
        max_attempts=5
        while [ $attempts -lt $max_attempts ]; do
            # Needed for glibc:
            export BOOTSTRAP_RAP=yes

            emerge -u --noreplace --oneshot --onlydeps --jobs=3 --rebuild-exclude "sys-apps/openrc sys-libs/glibc net-misc/curl sys-devel/gcc" $TO_BUILD
            if [ $? -ne 0 ]; then
                attempts=$(( $attempts + 1 ))
            else
                break
            fi
        done
        if [ $attempts -eq $max_attempts ]; then
            echo "Initial deps merge failed."
            exit 1
        fi
        fails=0
        success=0
        catpkg_fails=0
        catpkg_fails_list=""
        while true; do
          for pkg in $TO_BUILD; do

            # Needed for glibc:
            export BOOTSTRAP_RAP=yes

            attempt=1
            while [ $attempt -lt 4 ]; do
                success=no
                emerge -u --noreplace --oneshot --jobs=3 --rebuild-exclude "sys-apps/openrc sys-libs/glibc net-misc/curl sys-devel/gcc" $pkg
                if [ $? -ne 0 ]; then
                    fails=$(( $fails + 1 ))
                    attempt=$(( $attempt + 1 ))
                else
                    success=yes
                    break
                fi
            done
            if [ "$success" == "no" ]; then
                catpkg_fails=$(( $catpkg_fails + 1 ))
                catpkg_fails="$catpkg_fails $pkg"
            fi
        done
        if [ "$catpkg_fails" -eq 0 ]; then
            echo "Build script completed successfully"
        else
            echo "Build script FAILURE."
            echo "$catpkg_fails packages failed to merge: $catpkg_fails_list"
        fi
        exit $catpkg_fails
        BUILD_EOF
        chmod +x /var/tmp/build.sh
        /var/tmp/build.sh
        gcc-config 1
        ego profile mix-in -stage1
