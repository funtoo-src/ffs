fchroot:
  defaults:
    template: fchroot.tmpl
  steps:
    - linux: |
        make mrproper
        make INSTALL_HDR_PATH=/usr headers_install
        install -d /var/db/pkg/sys-kernel/linux-headers-${LINUX_VERSION}
    - pkgconf: |
        ./configure \
        --prefix=/usr
        make
        make install
        ln -sf pkgconf /usr/bin/pkg-config
        install -d /var/db/pkg/dev-util/pkgconf-${PKGCONF_VERSION}
    - perl: |
        sh Configure -des \
          -Dcc=gcc \
          -Dprefix=/usr \
          -Dsiteprefix=/usr/local \
          -Dvendorprefix=/usr \
          -Dscriptdir=/usr/bin \
          -Dprivlib=/usr/lib/perl5/${PERL_VERSION} \
          -Dsitelib=/usr/local/lib/perl5/${PERL_VERSION} \
          -Dvendorlib=/usr/lib/perl5/vendor_perl/${PERL_VERSION} \
          -Dlocincpth=/usr/include \
          -Dglibpth="/lib /usr/lib" \
          -Dmyhostname='localhost'
        make
        make install
        install -d /var/db/pkg/dev-lang/perl-${PERL_VERSION}
    - autoconf: |
        ./configure \
        --prefix=/usr
        make
        make install
    - automake: |
        ./configure \
        --prefix=/usr
        make
        make install
    - libtool: |
        ./configure \
        --prefix=/usr \
        --disable-ltdl-install
        make
        make install
    - openssl: |
        ./config --prefix=/usr \
        --openssldir=/etc/ssl \
        shared \
        zlib-dynamic
        make
        make install
        install -d /var/db/pkg/dev-libs/openssl-${OPENSSL_VERSION}
    - wget: |
        ./configure \
        ac_cv_libunistring=no \
        --prefix=/usr \
        --disable-assert \
        --disable-pcre \
        --disable-rpath \
        --without-included-libunistring \
        --without-libunistring-prefix \
        --with-ssl=openssl
        make
        make install
        install -d /var/db/pkg/net-misc/wget-${WGET_VERSION}
    - curl: |
        ./configure \
        --prefix=/usr \
        --with-openssl \
        --disable-static
        make
        make install
        install -d /var/db/pkg/net-misc/curl-${CURL_VERSION}
    - libffi: |
        ./configure \
        --prefix=/usr \
        --includedir=/usr/lib/libffi-${LIBFFI_VERSION/-/_}/include \
        --disable-multi-os-directory \
        --disable-static
        make
        make install
        install -d /var/db/pkg/dev-libs/libffi-${LIBFFI_VERSION/-/_}
    - python: |
        ./configure \
        --prefix=/usr \
        --enable-shared \
        --infodir=/usr/share/info \
        --mandir=/usr/share/man \
        --with-computed-gotos \
        --with-libc= \
        --enable-loadable-sqlite-extensions \
        --without-ensurepip
        make
        make install
        install -d /usr/lib/python-exec/python${PYTHON_VERSION%.*}
        ln -sf /usr/bin/python${PYTHON_VERSION%.*} /usr/lib/python-exec/python${PYTHON_VERSION%.*}/python${PYTHON_VERSION%%.*}
        ln -sf python${PYTHON_VERSION%%.*} /usr/lib/python-exec/python${PYTHON_VERSION%.*}/python
        cat > /usr/lib/python-exec/python${PYTHON_VERSION%.*}/python${PYTHON_VERSION%%.*}-config << "PYTHON_EOF"
        #!/bin/sh
        exec "python${PYTHON_VERSION%%.*}-config" "\${@}"
        PYTHON_EOF
        chmod +x /usr/lib/python-exec/python${PYTHON_VERSION%.*}/python${PYTHON_VERSION%%.*}-config
        ln -sf python${PYTHON_VERSION%%.*}-config /usr/lib/python-exec/python${PYTHON_VERSION%.*}/python-config
        ln -sf /tools/bin/2to3-${PYTHON_VERSION%.*} /usr/lib/python-exec/python${PYTHON_VERSION%.*}/2to3
        ln -sf /tools/bin/pydoc${PYTHON_VERSION%.*} /usr/lib/python-exec/python${PYTHON_VERSION%.*}/pydoc
        ln -sf /tools/bin/pyvenv-${PYTHON_VERSION%.*} /usr/lib/python-exec/python${PYTHON_VERSION%.*}/pyvenv
        install -d /var/db/pkg/dev-lang/python-${PYTHON_VERSION}
    - git: |
        ./configure \
        --prefix=/usr \
        --sysconfdir=/etc
        make
        make install
        install -d /var/db/pkg/dev-vcs/git-${GIT_VERSION}
    - pax-utils: |
        sed '/MPAGES/d' -i Makefile
        make CC=gcc PV=${PAX_UTILS_VERSION}
        make CC=gcc PV=${PAX_UTILS_VERSION} install
        install -d /var/db/pkg/app-misc/pax-utils-${PAX_UTILS_VERSION}
    - sandbox: |
        autoreconf -i -f
        ./configure \
        --prefix=/usr
        make
        make install
        install -d /var/db/pkg/sys-apps/sandbox-${SANDBOX_VERSION}
    - none: |
        cat > /etc/passwd << "PASSWD_EOF"
        root:x:0:0:root:/root:/bin/bash
        portage:x:250:250:portage:/var/tmp/portage:/bin/false
        PASSWD_EOF
        cat > /etc/group << "GROUP_EOF"
        root:x:0:root
        portage::250:portage
        GROUP_EOF
    - portage: |
        python3 setup.py build
        python3 setup.py install
        rm -f /usr/share/portage/config/repos.conf
        install -d /etc/portage
        cat > /etc/portage/make.conf << "MKCF_EOF"
        FEATURES="-pid-sandbox"
        FETCHCOMMAND="wget --no-check-certificate -t 3 -T 60 --passive-ftp -O \"\${DISTDIR}/\${FILE}\" \"\${URI}\""
        RESUMECOMMAND="wget --no-check-certificate -c -t 3 -T 60 --passive-ftp -O \"\${DISTDIR}/\${FILE}\" \"\${URI}\""
        GENTOO_MIRRORS=https://direct.funtoo.org
        MKCF_EOF
        ln -sf portage/make.conf /etc/make.conf
        install -d /etc/portage/make.profile
        cat > /etc/portage/make.profile/parent << "MKP_EOF"
        core-kit:funtoo/1.0/linux-gnu/arch/{{ego_arch}}
        core-kit:funtoo/1.0/linux-gnu/arch/{{ego_arch}}/subarch/{{ego_subarch}}
        core-kit:funtoo/1.0/linux-gnu/build/next
        core-kit:funtoo/1.0/linux-gnu/flavor/core
        core-kit:funtoo/1.0/linux-gnu/mix-ins/stage1
        MKP_EOF
        install -d /var/db/pkg/sys-apps/portage-${PORTAGE_VERSION}
    - ego: |
        install -d /usr/share/ego
        cp -r modules* python /usr/share/ego/
        rm /usr/share/ego/modules*/upgrade*
        rm -rf /usr/share/ego/python/test
        chmod +x /usr/share/ego/modules/*.ego
        cp ego /usr/bin/
        ln -sf ego /usr/bin/epro
        ln -sf ego /usr/bin/edoc
        cat > /etc/ego.conf << "EGO_EOF"
        [global]
        release = next
        # To build a Harvester based ffs stage1 simple uncomment the line below
        # For more details on Harvester see: https://harvester.funtoo.org/
        # sync_base_url = git://harvester.funtoo.org/funtoo/tree/{repo}
        EGO_EOF
        install -d /var/db/pkg/app-admin/ego-${EGO_VERSION}
        GIT_SSL_NO_VERIFY=true ego sync
    - none: |
        export FEATURES="-pid-sandbox nodoc noman noinfo"
        export CONFIG_PROTECT="-* /etc/ego.conf"
        ego profile mix-in +stage1
        # This allows all files in /etc/ to be directly overwritten.
        export CONFIG_PROTECT="-*"
        # This will ensure base files for env-update are in place. -build since fs already exists.
        USE="-build" emerge --nodeps baselayout
        /sbin/ldconfig
        /usr/sbin/env-update
        source /etc/profile
        test -e /etc/ld.so.conf
        test -e /etc/ld.so.cache

        # since we don't have gcc-config running, which manages and sets up typical symlinks that ebuilds
        # expect to find for certain things, we need to make sure this one is created manually. Without this,
        # rust can't link and dev-python/cryptography fails to build.

        if [ ! -e /usr/bin/cc ]; then
          ( cd /usr/bin; ln -s gcc cc )
        fi

        # If ncurses is built with libtinfo (i.e. USE="tinfo"), then libtinfo will exist, and bash will
        # currently automatically link against it even if we tell it to just use ncurses (see FL-10034).
        # So, if libtinfo is on this filesystem, then we want ncurses with USE="tinfo" on the stage1root.
        # For now, I think I will address this by syncing with funtoo norms and ensuring ncurses is
        # built with libtinfo disabled.

        # Experimental sys-devel/binutils 2.40 ebuild hot injection
        # These HEREDOC hot ebuilds can be removed once binutils 2.40 is in Harvester via its autogen
        # The three files generated from the binutils autogen that are hot injected below into the core-kit meta-repo
        # binutils-2.40_p1.ebuild, binutils ebuild Manifest, and binutils-libs-2.40_p1.ebuild
        #
        # Notes: This technique allows to test ebuilds before they actually merge into Harvester
        # In theory this same technique can be used to test highly exerimental things like new glibc ebuilds, eclasses, etc
        # It is always important to use the raw and endraw jinja2 blocks to fully escape everything in the HEREDOC
        #
        cat > /var/git/meta-repo/kits/core-kit/sys-devel/binutils/binutils-2.40_p1.ebuild << "BINUTILS_EBUILD"
        {% raw %}
        # Distributed under the terms of the GNU General Public License v2
       
        EAPI=7
        
        inherit eutils libtool flag-o-matic gnuconfig multilib toolchain-funcs
        
        DESCRIPTION="Tools necessary to build programs"
        HOMEPAGE="https://sourceware.org/binutils/"
        LICENSE="GPL-3+"
        # Proposition: consider disabling gold for binutils-2.39 and greater
        # Related Bug: https://bugs.funtoo.org/browse/FL-10758
        # GNU Gold is considered to be suffering from upstream bitrot: https://en.wikipedia.org/wiki/Gold_(linker)
        # GNU Gold is a project of Google and they sadly have decided to move onto other linkers
        # It currently has no official upstream maintainer due to Google abandoning it
        # GNU Gold has considerable less upstream commit activity than the main GNU bfd (ld) linker
        # Upstream GNU gold commits: https://sourceware.org/git/?p=binutils-gdb.git;a=history;f=gold;hb=HEAD
        # Setting the gold USE flag to match sys-devel/binutils-2.36.1_p3-r1 for now, which is forcing it on by default
        # The future Funtoo toolchain development efforts can collectively consider this GNU Gold deprecation proposal
        IUSE="cet default-gold doc +gold multitarget +nls +plugins static-libs test vanilla"
        IUSE+=" pgo"
        IUSE+=" zstd"
        REQUIRED_USE="default-gold? ( gold )"
        
        SRC_URI="https://ftp.gnu.org/gnu/binutils/binutils-2.40.tar.xz -> binutils-2.40.tar.xz https://dev.gentoo.org/~dilfridge/distfiles/binutils-2.40-patches-1.tar.xz -> binutils-2.40-patches-1.tar.xz"
        SLOT=$(ver_cut 1-2)
        
        S="${WORKDIR}/binutils-2.40"
        
        KEYWORDS="*"
        RDEPEND="
        !sys-devel/binutils-config
        !<sys-libs/binutils-libs-2.40_p1
        !<sys-devel/binutils-2.40_p1
        dev-libs/isl
        dev-libs/mpc
        dev-libs/mpfr
        dev-libs/gmp
        zstd? ( app-arch/zstd:= )
        sys-libs/zlib"
        DEPEND="${RDEPEND}"
        # See https://bugs.funtoo.org/browse/FL-10753 for complete
        # details on why dev-libs/isl was added for building binutils 2.39
        BDEPEND="
        	doc? ( sys-apps/texinfo )
        	test? (
        		dev-util/dejagnu
        		sys-devel/bc
        	)
        	nls? ( sys-devel/gettext )
        	sys-devel/flex
        	virtual/yacc
        	zstd? ( virtual/pkgconfig )
        "
        PDEPEND="=sys-libs/binutils-libs-2.40_p1"
        
        PATCHES=(
        )
        
        RESTRICT="!test? ( test )"
        
        MY_BUILDDIR=${WORKDIR}/build
        
        src_unpack() {
        	unpack binutils-2.40.tar.xz
        	cd "${WORKDIR}" || die
        	unpack binutils-2.40-patches-1.tar.xz
        	mkdir -p "${MY_BUILDDIR}" || die
        }
        
        src_prepare() {
        	if ! use vanilla; then
        		einfo "Applying binutils patchset binutils-2.40-patches-1.tar.xz"
        		eapply "${WORKDIR}/patch"
        		einfo "Done."
        	fi
        	# Apply things from PATCHES and user dirs
        	default
        	# Run misc portage update scripts
        	gnuconfig_update
        	elibtoolize --portage --no-uclibc
        }
        
        src_configure() {
        	# See https://www.gnu.org/software/make/manual/html_node/Parallel-Output.html
        	# Avoid really confusing logs from subconfigure spam, makes logs far
        	# more legible.
        	MAKEOPTS="--output-sync=line ${MAKEOPTS}"
        
        	strip-linguas -u */po
        
        	# Keep things sane
        	strip-flags
        
        	cd "${MY_BUILDDIR}"
        	local myconf=()
        
        	if use plugins ; then
        		myconf+=( --enable-plugins )
        	fi
        	# enable gold (installed as ld.gold) and ld's plugin architecture
        	if use gold ; then
        		myconf+=( --enable-gold )
        		if use default-gold; then
        			myconf+=( --enable-gold=default )
        		fi
        	fi
        
        	if use nls ; then
        		myconf+=( --without-included-gettext )
        	else
        		myconf+=( --disable-nls )
        	fi
        
        	# For bi-arch systems, enable a 64bit bfd.  This matches
        	# the bi-arch logic in toolchain.eclass. #446946
        	# We used to do it for everyone, but it's slow on 32bit arches. #438522
        	case $(tc-arch) in
        		ppc|sparc|x86) myconf+=( --enable-64-bit-bfd ) ;;
        	esac
        
        	use multitarget && myconf+=( --enable-targets=all --enable-64-bit-bfd )
        
        	# mips can't do hash-style=gnu ...
        	if [[ $(tc-arch) != mips ]] ; then
        		myconf+=( --enable-default-hash-style=gnu )
        	fi
        
        	if use vanilla ; then
        		PKG_VERSION="Funtoo"
        	else
        		PKG_VERSION="Funtoo 2.40_p1 patchset: https://dev.gentoo.org/~dilfridge/distfiles/binutils-2.40-patches-1.tar.xz"
        	fi
        
        	myconf+=(
        		--prefix=/usr
        		--host=${CHOST}
        		--target=${CHOST}
        		$(use_enable cet)
        		--enable-obsolete
        		--enable-secureplt
        		--enable-shared
        		$(use_enable static-libs static)
        		--enable-threads
        		--enable-relro
        		--enable-install-libiberty
        		--enable-textrel-check=warning
        		--disable-werror
        		--with-bugurl="https://bugs.funtoo.org/"
        		--with-pkgversion="${PKG_VERSION}"
        		--with-system-zlib
        		--without-zlib
        		# Strip out broken static link flags.
        		# https://gcc.gnu.org/PR56750
        		--without-stage1-ldflags
        		--without-debuginfod
        		--enable-new-dtags
        		--disable-jansson
        		--disable-{gdb,libdecnumber,readline,sim}
        		# Avoid automagic dev-libs/msgpack dep, bug #865875
        		--without-msgpack
        		$(use_with zstd)
        		${EXTRA_ECONF}
        	)
        
        	if use pgo ; then
        		myconf+=( $(use_enable pgo pgo-build lto) )
        		export BUILD_CFLAGS="${CFLAGS}"
        	fi
        	echo ./configure "${myconf[@]}"
        	"${S}"/configure "${myconf[@]}" || die
        
        	# Prevent makeinfo from running if doc is unset.
        	if ! use doc ; then
        		sed -i \
        			-e '/^MAKEINFO/s:=.*:= true:' \
        			Makefile || die
        	fi
        }
        
        src_compile() {
        	cd "${MY_BUILDDIR}"
        	emake all
        
        	# only build info pages if the user wants them
        	if use doc ; then
        		emake info
        	fi
        
        	# we nuke the manpages when we're left with junk
        	# (like when we bootstrap, no perl -> no manpages)
        	find . -name '*.1' -a -size 0 -delete
        }
        
        src_test() {
        	cd "${MY_BUILDDIR}"
        	# bug 637066
        	filter-flags -Wall -Wreturn-type
        	emake -k check
        }
        
        src_install() {
        	cd "${MY_BUILDDIR}"
        	emake DESTDIR="${D}" install
        
        	# Binutils installs tools in /usr/bin, and a a subset of these (the build-related ones) in /usr/$CHOST/bin.
        	# There are duplications, and hard-links are used.
        
        	# To simplify installation, ensure all the tools installed to /usr/bin are moved to /usr/$CHOST/bin, because
        	# some only appear in /usr/bin:
        
        	cd ${D}/usr/bin || die
        	for x in *; do
        		if ! [ -e ${D}/usr/$CHOST/bin/${x} ]; then
        			mv ${x} ${D}/usr/$CHOST/bin || die
        		fi
        	done
        
        	# Set up /usr/$CHOST/bin/ld to use a symlink rather than a hardlink to point to the correct version of ld:
        
        	rm -f ${D}/usr/$CHOST/bin/ld
        	if use default-gold; then
        	  ln -s ld.gold ${D}/usr/$CHOST/bin/ld || die
        	else
        	  ln -s ld.bfd ${D}/usr/$CHOST/bin/ld || die
        	fi
        
        	# Now set up /usr/bin to contain symlinks to the actual tools which are in /usr/$CHOST/bin. We will also
        	# create a $CHOST-(name-of-bin) symlink in /usr/bin:
        
        	rm -f ${D}/usr/bin/* || die
        	cd ${D}/usr/$CHOST/bin || die
        	for x in *; do
        		ln -s ../$CHOST/bin/$x ${D}/usr/bin/$x || die
        		ln -s ../$CHOST/bin/$x ${D}/usr/bin/$CHOST-$x || die
        	done
        
        	use static-libs || find "${ED}" -name '*.la' -delete
        
        	# Provide libiberty.h directly.
        	dosym libiberty/libiberty.h /usr/include/libiberty.h
        
        #	doins "${libiberty_headers[@]/#/${S}/include/}"
        
        	cd "${S}"
        	dodoc README
        	docinto bfd
        	dodoc bfd/ChangeLog* bfd/README bfd/PORTING bfd/TODO
        	docinto binutils
        	dodoc binutils/ChangeLog binutils/NEWS binutils/README
        	docinto gas
        	dodoc gas/ChangeLog* gas/CONTRIBUTORS gas/NEWS gas/README*
        	docinto gprof
        	dodoc gprof/ChangeLog* gprof/TEST gprof/TODO gprof/bbconv.pl
        	docinto ld
        	dodoc ld/ChangeLog* ld/README ld/NEWS ld/TODO
        	docinto libiberty
        	dodoc libiberty/ChangeLog* libiberty/README
        	docinto opcodes
        	dodoc opcodes/ChangeLog*
        
          # This works around an issue where some things are installed in /usr/lib and others in /usr/lib64, which will
          # cause Portage to complain and abort. This just combines them:
        
        	if [ -d ${D}/usr/lib ] && [ -d ${D}/usr/lib64 ]; then
        	mv ${D}/usr/lib/* ${D}/usr/lib64
        		rm -rf ${D}/usr/lib
        	fi
        }
        
        pkg_preinst() {
        
          # This section includes hacks to remove things that may conflict with the merge. We remove existing tools symlinks
          # as well as remove the ldscripts symlink so it can be replaced with a real directory. This is done in pkg_preinst()
          # as it is right before Portage tries to copy things to the filesystem root -- so gets things out of the way just
          # in time...
        
        	for x in addr2line ar as c++filt dwp elfedit gprof ld ld.bfd ld.gold nm objcopy objdump ranlib readelf size strings strip; do
        		rm -f ${ROOT}/usr/bin/$x
        		rm -f ${ROOT}/usr/${CHOST}/bin/$x
        	done
        	ldscripts_link=${ROOT}/usr/${CHOST}/lib/ldscripts
        	if [ -L $ldscripts_link ]; then
        		rm -f $ldscripts_link
        	else
        		echo $ldscripts_link is NOT a symlink
        	fi
        }
        {% endraw %}
        BINUTILS_EBUILD

        cat > /var/git/meta-repo/kits/core-kit/sys-devel/binutils/Manifest << "BINUTILS_EBUILD_MANIFEST"
        {% raw %}
        DIST binutils-2.36.1-patches-3.tar.xz 32720 BLAKE2B 2a5a60168ec5ff612e7e58530092f306460cdb4a963320978dffcc22d73684486a14a5981f6eab2f7fc270def22cdc9954de455d680b2de4befc1ad4916347ba SHA512 e429cc82451675f14715d4e7640fe7b995495c8759a8e919c4291f8ca8358a663012f05c1ec6e60b1261114848379fefc9df723929770462dd676fa04fc7aa54
        DIST binutils-2.36.1.tar.xz 22772248 BLAKE2B 03fbfbedd6dba2beaa836b1ed254eddd7a54a163d3061fd93edd2b9591cae24ba049b26658c524b5ccecc2f22d431dfa168218d2531aa356945c994fbbe896fa SHA512 cc24590bcead10b90763386b6f96bb027d7594c659c2d95174a6352e8b98465a50ec3e4088d0da038428abe059bbc4ae5f37b269f31a40fc048072c8a234f4e9
        DIST binutils-2.39-patches-4.tar.xz 62880 BLAKE2B 5cc335769d9c88417583ce059c61d0d7655f3ab9ac69647e6e2f65bd3a9dd143fe34c50bb68ab81d4226ddd0e4ef405d7102f67375a672eedc3d01b92b8ef497 SHA512 ef81350979af64cf35800b39982c84657a5c01362c01d221164a43d8f0dd80276c9f052c55d24516fad457e6671a58d467d71b5edd6c1f53fddbdb31172a21ee
        DIST binutils-2.39.tar.xz 25167756 BLAKE2B ac6a5296c6586d53eaadcbffc5c399a6d79edf72450b9bb8b3525ce525129cef3d2eb90c85ef3bb3270b5a03b0e1ffb8f0b705f028158726f9777ebb8685066f SHA512 68e038f339a8c21faa19a57bbc447a51c817f47c2e06d740847c6e9cc3396c025d35d5369fa8c3f8b70414757c89f0e577939ddc0d70f283182504920f53b0a3
        DIST binutils-2.40-patches-1.tar.xz 12260 BLAKE2B d525502e08012080417634fd41981550362d4d799952e89f388af2a6e5db5b80e88bfdb0b5b1d2a1bcf8ebda529eefbced8fa2ae84c7fe3ddb10184e98d4b369 SHA512 140f80be786511f63651e67bf25c2992de6a21bac00a3252dcf98becc3f9379c8070ef1380d5542bbf2e1908c50dab2c7ebb651d13bb97609594fe9fd9f1f079
        DIST binutils-2.40.tar.xz 25241484 BLAKE2B 8d799f7c595f878b9af5b17a490021dd8b8300ac2fe0ed8574c012929d22d2d0493e003a3e631a9436e8e712da801779b777c566167fe42b0bde119ffa5ad1c2 SHA512 a37e042523bc46494d99d5637c3f3d8f9956d9477b748b3b1f6d7dfbb8d968ed52c932e88a4e946c6f77b8f48f1e1b360ca54c3d298f17193f3b4963472f6925
        {% endraw %}
        BINUTILS_EBUILD_MANIFEST

        cat > /var/git/meta-repo/kits/core-kit/sys-libs/binutils-libs/binutils-libs-2.40_p1.ebuild << "BINUTLS_LIB_EBUILD"
        # Distributed under the terms of the GNU General Public License v2
        
        EAPI=7
        
        DESCRIPTION="Core binutils libraries (libbfd, libopcodes, libiberty) -- skeleton package"
        RDEPEND="=sys-devel/binutils-2.40_p1"
        SLOT=0
        
        KEYWORDS="*"
        BINUTLS_LIB_EBUILD

        chown -Rv portage:portage /var/git/meta-repo/kits/core-kit/sys-devel/binutils/
        chown -Rv portage:portage /var/git/meta-repo/kits/core-kit/sys-libs/binutils-libs

        # remove to prevent binutils mistakenly linking against this, which is non-PIC and won't work.
        rm -f /usr/lib/libiberty.a
        emerge --jobs=3 =sys-devel/binutils-2.40_p1

        # The pre-built util-linux doesn't install libmount, which is required by glib. If we don't merge~
        # util-linux officially, glib will think libmount is installed but glib meson configure will fail
        # when the lib isn't found:

        # Python USE flag and meson are being added for pax-utils-1.3.5, which is required for glibc-2.36
        # pax-utils-1.3.5 now requires meson, this ensures meson installs before pax-utils
        #
        USE="python" emerge --jobs=3 util-linux
        emerge --jobs=3 bash gcc
        gcc-config 1

