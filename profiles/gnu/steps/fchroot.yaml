fchroot:
  defaults:
    template: fchroot.tmpl
  steps:
    - linux: |
        make mrproper
        make INSTALL_HDR_PATH=/usr headers_install
        install -d /var/db/pkg/sys-kernel/linux-headers-${LINUX_VERSION}
    - pkgconf: |
        ./configure \
        --prefix=/usr
        make
        make install
        ln -sf pkgconf /usr/bin/pkg-config
        install -d /var/db/pkg/dev-util/pkgconf-${PKGCONF_VERSION}
    - perl: |
        sh Configure -des \
          -Dcc=gcc \
          -Dprefix=/usr \
          -Dsiteprefix=/usr/local \
          -Dvendorprefix=/usr \
          -Dscriptdir=/usr/bin \
          -Dprivlib=/usr/lib/perl5/${PERL_VERSION} \
          -Dsitelib=/usr/local/lib/perl5/${PERL_VERSION} \
          -Dvendorlib=/usr/lib/perl5/vendor_perl/${PERL_VERSION} \
          -Dlocincpth=/usr/include \
          -Dglibpth="/lib /usr/lib" \
          -Dmyhostname='localhost'
        make
        make install
        install -d /var/db/pkg/dev-lang/perl-${PERL_VERSION}
    - autoconf: |
        ./configure \
        --prefix=/usr
        make
        make install
        install -d /var/db/pkg/sys-devel/autoconf-${AUTOCONF_VERSION}
    - automake: |
        ./configure \
        --prefix=/usr
        make
        make install
        install -d /var/db/pkg/sys-devel/automake-${AUTOMAKE_VERSION}
    - libtool: |
        ./configure \
        --prefix=/usr \
        --disable-ltdl-install
        make
        make install
        install -d /var/db/pkg/sys-devel/libtool-${LIBTOOL_VERSION}
    - openssl: |
        ./config --prefix=/usr \
        --openssldir=/etc/ssl \
        shared \
        zlib-dynamic
        make
        make install
        install -d /var/db/pkg/dev-libs/openssl-${OPENSSL_VERSION}
    - wget: |
        ./configure \
        ac_cv_libunistring=no \
        --prefix=/usr \
        --disable-assert \
        --disable-pcre \
        --disable-rpath \
        --without-included-libunistring \
        --without-libunistring-prefix \
        --with-ssl=openssl
        make
        make install
        install -d /var/db/pkg/net-misc/wget-${WGET_VERSION}
    - curl: |
        ./configure \
        --prefix=/usr \
        --with-openssl \
        --disable-static
        make
        make install
        install -d /var/db/pkg/net-misc/curl-${CURL_VERSION}
    - libffi: |
        ./configure \
        --prefix=/usr \
        --includedir=/usr/lib/libffi-${LIBFFI_VERSION/-/_}/include \
        --disable-multi-os-directory \
        --disable-static
        make
        make install
        install -d /var/db/pkg/dev-libs/libffi-${LIBFFI_VERSION/-/_}
    - python: |
        ./configure \
        --prefix=/usr \
        --enable-shared \
        --infodir=/usr/share/info \
        --mandir=/usr/share/man \
        --with-computed-gotos \
        --with-libc= \
        --enable-loadable-sqlite-extensions \
        --without-ensurepip
        make
        make install
        install -d /usr/lib/python-exec/python${PYTHON_VERSION%.*}
        ln -sf /usr/bin/python${PYTHON_VERSION%.*} /usr/lib/python-exec/python${PYTHON_VERSION%.*}/python${PYTHON_VERSION%%.*}
        ln -sf python${PYTHON_VERSION%%.*} /usr/lib/python-exec/python${PYTHON_VERSION%.*}/python
        cat > /usr/lib/python-exec/python${PYTHON_VERSION%.*}/python${PYTHON_VERSION%%.*}-config << "PYTHON_EOF"
        #!/bin/sh
        exec "python${PYTHON_VERSION%%.*}-config" "\${@}"
        PYTHON_EOF
        chmod +x /usr/lib/python-exec/python${PYTHON_VERSION%.*}/python${PYTHON_VERSION%%.*}-config
        ln -sf python${PYTHON_VERSION%%.*}-config /usr/lib/python-exec/python${PYTHON_VERSION%.*}/python-config
        ln -sf /tools/bin/2to3-${PYTHON_VERSION%.*} /usr/lib/python-exec/python${PYTHON_VERSION%.*}/2to3
        ln -sf /tools/bin/pydoc${PYTHON_VERSION%.*} /usr/lib/python-exec/python${PYTHON_VERSION%.*}/pydoc
        ln -sf /tools/bin/pyvenv-${PYTHON_VERSION%.*} /usr/lib/python-exec/python${PYTHON_VERSION%.*}/pyvenv
        install -d /var/db/pkg/dev-lang/python-${PYTHON_VERSION}
    - git: |
        ./configure \
        --prefix=/usr \
        --sysconfdir=/etc
        make
        make install
        install -d /var/db/pkg/dev-vcs/git-${GIT_VERSION}
    - pax-utils: |
        sed '/MPAGES/d' -i Makefile
        make CC=gcc PV=${PAX_UTILS_VERSION}
        make CC=gcc PV=${PAX_UTILS_VERSION} install
        install -d /var/db/pkg/app-misc/pax-utils-${PAX_UTILS_VERSION}
    - sandbox: |
        autoreconf -i -f
        ./configure \
        --prefix=/usr
        make
        make install
        install -d /var/db/pkg/sys-apps/sandbox-${SANDBOX_VERSION}
    - none: |
        cat > /etc/passwd << "PASSWD_EOF"
        root:x:0:0:root:/root:/bin/bash
        portage:x:250:250:portage:/var/tmp/portage:/bin/false
        PASSWD_EOF
        cat > /etc/group << "GROUP_EOF"
        root:x:0:root
        portage::250:portage
        GROUP_EOF
    - portage: |
        python3 setup.py build
        python3 setup.py install
        rm -f /usr/share/portage/config/repos.conf
        install -d /etc/portage
        cat > /etc/portage/make.conf << "MKCF_EOF"
        FEATURES="-pid-sandbox"
        FETCHCOMMAND="wget --no-check-certificate -t 3 -T 60 --passive-ftp -O \"\${DISTDIR}/\${FILE}\" \"\${URI}\""
        RESUMECOMMAND="wget --no-check-certificate -c -t 3 -T 60 --passive-ftp -O \"\${DISTDIR}/\${FILE}\" \"\${URI}\""
        MKCF_EOF
        ln -sf portage/make.conf /etc/make.conf
        install -d /etc/portage/make.profile
        cat > /etc/portage/make.profile/parent << "MKP_EOF"
        core-kit:funtoo/1.0/linux-gnu/arch/{{ego_arch}}
        core-kit:funtoo/1.0/linux-gnu/arch/{{ego_arch}}/subarch/{{ego_subarch}}
        core-kit:funtoo/1.0/linux-gnu/build/current
        core-kit:funtoo/1.0/linux-gnu/flavor/core
        MKP_EOF
        install -d /var/db/pkg/sys-apps/portage-${PORTAGE_VERSION}
    - ego: |
        install -d /usr/share/ego
        cp -r modules* python /usr/share/ego/
        rm /usr/share/ego/modules*/upgrade*
        rm -rf /usr/share/ego/python/test
        chmod +x /usr/share/ego/modules/*.ego
        cp ego /usr/bin/
        ln -sf ego /usr/bin/epro
        ln -sf ego /usr/bin/edoc
        cat > /etc/ego.conf << "EGO_EOF"
        [global]
        release = next
        EGO_EOF
        install -d /var/db/pkg/app-admin/ego-${EGO_VERSION}
        GIT_SSL_NO_VERIFY=true ego sync
    - none: |
        export FEATURES="-pid-sandbox nodoc noman noinfo"
        export CONFIG_PROTECT="-* /etc/ego.conf"
        # work around an issue where split-usr is being unset.
        export USE="split-usr"
        ego profile mix-in +stage1
        # It's important to merge baselayout first so it can set perms on key dirs
        emerge --nodeps baselayout
        /sbin/ldconfig
        /usr/sbin/env-update
        test -e /etc/ld.so.conf
        test -e /etc/ld.so.cache
        # fix a required USE flag
        install -d /etc/portage/package.use
        echo "dev-libs/libxml2 python" > /etc/portage/package.use/libxml2
        #emerge --oneshot python glibc

