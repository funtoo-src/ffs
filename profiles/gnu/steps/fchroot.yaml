fchroot:
  defaults:
    template: fchroot.tmpl
  steps:
    - linux: |
        make mrproper
        make INSTALL_HDR_PATH=/usr headers_install
        install -d /var/db/pkg/sys-kernel/linux-headers-${LINUX_VERSION}
    - pkgconf: |
        ./configure \
        --prefix=/usr
        make
        make install
        ln -sf pkgconf /usr/bin/pkg-config
        install -d /var/db/pkg/dev-util/pkgconf-${PKGCONF_VERSION}
    - perl: |
        sh Configure -des \
          -Dcc=gcc \
          -Dprefix=/usr \
          -Dsiteprefix=/usr/local \
          -Dvendorprefix=/usr \
          -Dscriptdir=/usr/bin \
          -Dprivlib=/usr/lib/perl5/${PERL_VERSION} \
          -Dsitelib=/usr/local/lib/perl5/${PERL_VERSION} \
          -Dvendorlib=/usr/lib/perl5/vendor_perl/${PERL_VERSION} \
          -Dlocincpth=/usr/include \
          -Dglibpth="/lib /usr/lib" \
          -Dmyhostname='localhost'
        make
        make install
        install -d /var/db/pkg/dev-lang/perl-${PERL_VERSION}
    - autoconf: |
        ./configure \
        --prefix=/usr
        make
        make install
    - automake: |
        ./configure \
        --prefix=/usr
        make
        make install
    - libtool: |
        ./configure \
        --prefix=/usr \
        --disable-ltdl-install
        make
        make install
    - openssl: |
        ./config --prefix=/usr \
        --openssldir=/etc/ssl \
        shared \
        zlib-dynamic
        make
        make install
        install -d /var/db/pkg/dev-libs/openssl-${OPENSSL_VERSION}
    - wget: |
        ./configure \
        ac_cv_libunistring=no \
        --prefix=/usr \
        --disable-assert \
        --disable-pcre \
        --disable-rpath \
        --without-included-libunistring \
        --without-libunistring-prefix \
        --with-ssl=openssl
        make
        make install
        install -d /var/db/pkg/net-misc/wget-${WGET_VERSION}
    - curl: |
        ./configure \
        --prefix=/usr \
        --with-openssl \
        --disable-static
        make
        make install
        install -d /var/db/pkg/net-misc/curl-${CURL_VERSION}
    - libffi: |
        ./configure \
        --prefix=/usr \
        --includedir=/usr/lib/libffi-${LIBFFI_VERSION/-/_}/include \
        --disable-multi-os-directory \
        --disable-static
        make
        make install
        install -d /var/db/pkg/dev-libs/libffi-${LIBFFI_VERSION/-/_}
    - python: |
        ./configure \
        --prefix=/usr \
        --enable-shared \
        --infodir=/usr/share/info \
        --mandir=/usr/share/man \
        --with-computed-gotos \
        --with-libc= \
        --enable-loadable-sqlite-extensions \
        --without-ensurepip
        make
        make install
        install -d /usr/lib/python-exec/python${PYTHON_VERSION%.*}
        ln -sf /usr/bin/python${PYTHON_VERSION%.*} /usr/lib/python-exec/python${PYTHON_VERSION%.*}/python${PYTHON_VERSION%%.*}
        ln -sf python${PYTHON_VERSION%%.*} /usr/lib/python-exec/python${PYTHON_VERSION%.*}/python
        cat > /usr/lib/python-exec/python${PYTHON_VERSION%.*}/python${PYTHON_VERSION%%.*}-config << "PYTHON_EOF"
        #!/bin/sh
        exec "python${PYTHON_VERSION%%.*}-config" "\${@}"
        PYTHON_EOF
        chmod +x /usr/lib/python-exec/python${PYTHON_VERSION%.*}/python${PYTHON_VERSION%%.*}-config
        ln -sf python${PYTHON_VERSION%%.*}-config /usr/lib/python-exec/python${PYTHON_VERSION%.*}/python-config
        ln -sf /tools/bin/2to3-${PYTHON_VERSION%.*} /usr/lib/python-exec/python${PYTHON_VERSION%.*}/2to3
        ln -sf /tools/bin/pydoc${PYTHON_VERSION%.*} /usr/lib/python-exec/python${PYTHON_VERSION%.*}/pydoc
        ln -sf /tools/bin/pyvenv-${PYTHON_VERSION%.*} /usr/lib/python-exec/python${PYTHON_VERSION%.*}/pyvenv
        install -d /var/db/pkg/dev-lang/python-${PYTHON_VERSION}
    - git: |
        ./configure \
        --prefix=/usr \
        --sysconfdir=/etc
        make
        make install
        install -d /var/db/pkg/dev-vcs/git-${GIT_VERSION}
    - pax-utils: |
        sed '/MPAGES/d' -i Makefile
        make CC=gcc PV=${PAX_UTILS_VERSION}
        make CC=gcc PV=${PAX_UTILS_VERSION} install
        install -d /var/db/pkg/app-misc/pax-utils-${PAX_UTILS_VERSION}
    - sandbox: |
        autoreconf -i -f
        ./configure \
        --prefix=/usr
        make
        make install
        install -d /var/db/pkg/sys-apps/sandbox-${SANDBOX_VERSION}
    - none: |
        cat > /etc/passwd << "PASSWD_EOF"
        root:x:0:0:root:/root:/bin/bash
        portage:x:250:250:portage:/var/tmp/portage:/bin/false
        PASSWD_EOF
        cat > /etc/group << "GROUP_EOF"
        root:x:0:root
        portage::250:portage
        GROUP_EOF
    - portage: |
        python3 setup.py build
        python3 setup.py install
        rm -f /usr/share/portage/config/repos.conf
        install -d /etc/portage
        cat > /etc/portage/make.conf << "MKCF_EOF"
        FEATURES="-pid-sandbox"
        FETCHCOMMAND="wget --no-check-certificate -t 3 -T 60 --passive-ftp -O \"\${DISTDIR}/\${FILE}\" \"\${URI}\""
        RESUMECOMMAND="wget --no-check-certificate -c -t 3 -T 60 --passive-ftp -O \"\${DISTDIR}/\${FILE}\" \"\${URI}\""
        GENTOO_MIRRORS=https://direct.funtoo.org
        MKCF_EOF
        ln -sf portage/make.conf /etc/make.conf
        install -d /etc/portage/make.profile
        cat > /etc/portage/make.profile/parent << "MKP_EOF"
        core-kit:funtoo/1.0/linux-gnu/arch/{{ego_arch}}
        core-kit:funtoo/1.0/linux-gnu/arch/{{ego_arch}}/subarch/{{ego_subarch}}
        core-kit:funtoo/1.0/linux-gnu/build/next
        core-kit:funtoo/1.0/linux-gnu/flavor/core
        core-kit:funtoo/1.0/linux-gnu/mix-ins/stage1
        MKP_EOF
        install -d /var/db/pkg/sys-apps/portage-${PORTAGE_VERSION}
    - ego: |
        install -d /usr/share/ego
        cp -r modules* python /usr/share/ego/
        rm /usr/share/ego/modules*/upgrade*
        rm -rf /usr/share/ego/python/test
        chmod +x /usr/share/ego/modules/*.ego
        cp ego /usr/bin/
        ln -sf ego /usr/bin/epro
        ln -sf ego /usr/bin/edoc
        cat > /etc/ego.conf << "EGO_EOF"
        [global]
        release = next
        # To build a Harvester based ffs stage1 simple uncomment the line below
        # For more details on Harvester see: https://harvester.funtoo.org/
        # sync_base_url = git://harvester.funtoo.org/funtoo/tree/{repo}
        EGO_EOF
        install -d /var/db/pkg/app-admin/ego-${EGO_VERSION}
        GIT_SSL_NO_VERIFY=true ego sync
    - none: |
        export FEATURES="-pid-sandbox nodoc noman noinfo"
        export CONFIG_PROTECT="-* /etc/ego.conf"
        ego profile mix-in +stage1
        # This allows all files in /etc/ to be directly overwritten.
        export CONFIG_PROTECT="-*"
        # This will ensure base files for env-update are in place. -build since fs already exists.
        USE="-build" emerge --nodeps baselayout
        /sbin/ldconfig
        /usr/sbin/env-update
        source /etc/profile
        test -e /etc/ld.so.conf
        test -e /etc/ld.so.cache

        # remove to prevent binutils mistakenly linking against this, which is non-PIC and won't work.
        rm -f /usr/lib/libiberty.a
        emerge --jobs=3 binutils

        # since we don't have gcc-config running, which manages and sets up typical symlinks that ebuilds
        # expect to find for certain things, we need to make sure this one is created manually. Without this,
        # rust can't link and dev-python/cryptography fails to build.

        if [ ! -e /usr/bin/cc ]; then
          ( cd /usr/bin; ln -s gcc cc )
        fi

        # If ncurses is built with libtinfo (i.e. USE="tinfo"), then libtinfo will exist, and bash will
        # currently automatically link against it even if we tell it to just use ncurses (see FL-10034).
        # So, if libtinfo is on this filesystem, then we want ncurses with USE="tinfo" on the stage1root.
        # For now, I think I will address this by syncing with funtoo norms and ensuring ncurses is
        # built with libtinfo disabled.

        # 20221123 siris -- This is a hotfix to inject the new upstream tmpfiles.eclass
        # It can be removed once https://code.funtoo.org/bitbucket/projects/CORE/repos/kit-fixups/commits/c11e912b49471e7e80b2d48440acbf7ab7c588f5
        # is integrated into a regenerated Harvester Funtoo tree
        cat > /var/git/meta-repo/kits/core-kit/eclass/tmpfiles.eclass << "TMPFILES_ECLASS"
        {% raw %}
        # Copyright 2016-2022 Gentoo Authors
        # Distributed under the terms of the GNU General PublicLicense v2
        
        # @ECLASS: tmpfiles.eclass
        # @MAINTAINER:
        # Gentoo systemd project <systemd@gentoo.org>
        # William Hubbs <williamh@gentoo.org>
        # @AUTHOR:
        # Mike Gilbert <floppym@gentoo.org>
        # William Hubbs <williamh@gentoo.org>
        # @SUPPORTED_EAPIS: 5 6 7
        # @BLURB: Functions related to tmpfiles.d files
        # @DESCRIPTION:
        # This eclass provides functionality related to installing and
        # creating volatile and temporary files based on configuration files$and
        # locations defined at this URL:
        #
        # https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html
        #
        # The dotmpfiles and newtmpfiles functions are used to install
        # configuration files into /usr/lib/tmpfiles.d, then in pkg_postinst,
        # the tmpfiles_process function must be called to process the newly
        # installed tmpfiles.d entries.
        #
        # The tmpfiles.d files can be used by service managers to recreate/clean
        # up temporary directories on boot or periodically. Additionally,
        # the pkg_postinst() call ensures that the directories are created
        # on systems that do not support tmpfiles.d natively, without a need
        # for explicit fallback.
        #
        # @EXAMPLE:
        # Typical usage of this eclass:
        #
        # @CODE
        #	EAPI=6
        #	inherit tmpfiles
        #
        #	...
        #
        #	src_install() {
        #		...
        #		dotmpfiles "${FILESDIR}"/file1.conf "${FILESDIR}"/file2.conf
        #		newtmpfiles "${FILESDIR}"/file3.conf-${PV} file3.conf
        #		...
        #	}
        #
        #	pkg_postinst() {
        #		...
        #		tmpfiles_process file1.conf file2.conf file3.conf
        #		...
        #	}
        #
        # @CODE
        
        if [[ -z ${_TMPFILES_ECLASS} ]]; then
        _TMPFILES_ECLASS=1
        
        case "${EAPI}" in
        5|6|7) ;;
        *) die "API is undefined for EAPI ${EAPI}" ;;
        esac
        
        # @ECLASS_VARIABLE: TMPFILES_OPTIONAL
        # @PRE_INHERIT
        # @DEFAULT_UNSET
        # @DESCRIPTION:
        # When not empty, disables the dependency on virtual/tmpfiles.
        # Ebuilds that call tmpfiles_process conditionally should declare a
        # conditional dependency themselves.
        if [[ -z ${TMPFILES_OPTIONAL} ]]; then
        	RDEPEND="virtual/tmpfiles"
        fi
        
        # @FUNCTION: dotmpfiles
        # @USAGE: <tmpfiles.d_file> ...
        # @DESCRIPTION:
        # Install one or more tmpfiles.d files into /usr/lib/tmpfiles.d.
        dotmpfiles() {
        	debug-print-function "${FUNCNAME}" "$@"
        
        	local f
        	for f; do
        		if [[ ${f} != *.conf ]]; then
        			die "tmpfiles.d files must end with .conf"
        		fi
        	done
        
        	(
        		insopts -m 0644
        		insinto /usr/lib/tmpfiles.d
        		doins "$@"
        	)
        }
        
        # @FUNCTION: newtmpfiles
        # @USAGE: <old-name> <new-name>.conf
        # @DESCRIPTION:
        # Install a tmpfiles.d file in /usr/lib/tmpfiles.d under a new name.
        newtmpfiles() {
        	debug-print-function "${FUNCNAME}" "$@"
        
        	if [[ $2 != *.conf ]]; then
        		die "tmpfiles.d files must end with .conf"
        	fi
        
        	(
        		insopts -m 0644
        		insinto /usr/lib/tmpfiles.d
        		newins "$@"
        	)
        }
        
        # @FUNCTION: tmpfiles_process
        # @USAGE: <filename> <filename> ...
        # @DESCRIPTION:
        # Call a tmpfiles.d implementation to create new volatile and temporary
        # files and directories.
        tmpfiles_process() {
        	debug-print-function "${FUNCNAME}" "$@"
        
        	[[ ${EBUILD_PHASE} == postinst ]] || die "${FUNCNAME}: Only valid in pkg_postinst"
        	[[ ${#} -gt 0 ]] || die "${FUNCNAME}: Must specify at least one filename"
        
        	# Only process tmpfiles for the currently running system
        	if [[ ${ROOT:-/} != / ]]; then
        		ewarn "Warning: tmpfiles.d not processed on ROOT != /. If you do not use"
        		ewarn "a service manager supporting tmpfiles.d, you need to run"
        		ewarn "the following command after booting (or chroot-ing with all"
        		ewarn "appropriate filesystems mounted) into the ROOT:"
        		ewarn
        		ewarn "  tmpfiles --create"
        		ewarn
        		ewarn "Failure to do so may result in missing runtime directories"
        		ewarn "and failures to run programs or start services."
        		return
        	fi
        
        	if type systemd-tmpfiles &> /dev/null; then
        		systemd-tmpfiles --create "$@"
        	elif type tmpfiles &> /dev/null; then
        		tmpfiles --create "$@"
        	fi
        	if [[ $? -ne 0 ]]; then
        		ewarn "The tmpfiles processor exited with a non-zero exit code"
        	fi
        }
        
        fi
        {% endraw %}
        TMPFILES_ECLASS
        # The pre-built util-linux doesn't install libmount, which is required by glib. If we don't merge~
        # util-linux officially, glib will think libmount is installed but glib meson configure will fail
        # when the lib isn't found:

        # Python USE flag and meson are being added for pax-utils-1.3.5, which is required for glibc-2.36
        # pax-utils-1.3.5 now requires meson, this ensures meson installs before pax-utils
        #
        USE="python" emerge --jobs=3 util-linux
        emerge --jobs=3 bash gcc
        gcc-config 1

